name: Test Suite

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Create test credentials file
      run: |
        cat > credentials.json << 'EOF'
        {
          "type": "service_account",
          "project_id": "test-project",
          "private_key_id": "test-key-id",
          "private_key": "-----BEGIN PRIVATE KEY-----\nTEST_KEY\n-----END PRIVATE KEY-----\n",
          "client_email": "test@test-project.iam.gserviceaccount.com",
          "client_id": "123456789",
          "auth_uri": "https://accounts.google.com/o/oauth2/auth",
          "token_uri": "https://oauth2.googleapis.com/token",
          "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
          "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test",
          "universe_domain": "googleapis.com"
        }
        EOF

    - name: Run linting
      run: |
        # Code formatting check
        black --check src/ tests/
        
        # Import sorting check
        isort --check-only src/ tests/
        
        # Linting
        flake8 src/ tests/

    - name: Run type checking
      run: |
        mypy src/ --ignore-missing-imports

    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=term-missing -m "unit"

    - name: Run integration tests
      run: |
        pytest tests/integration/ -v -m "integration and not slow" --maxfail=3

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  test-slow:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Create test credentials file
      run: |
        cat > credentials.json << 'EOF'
        {
          "type": "service_account",
          "project_id": "test-project",
          "private_key_id": "test-key-id",
          "private_key": "-----BEGIN PRIVATE KEY-----\nTEST_KEY\n-----END PRIVATE KEY-----\n",
          "client_email": "test@test-project.iam.gserviceaccount.com",
          "client_id": "123456789",
          "auth_uri": "https://accounts.google.com/o/oauth2/auth",
          "token_uri": "https://oauth2.googleapis.com/token",
          "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
          "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test",
          "universe_domain": "googleapis.com"
        }
        EOF

    - name: Run slow tests
      run: |
        pytest tests/integration/ -v -m "slow" --maxfail=1

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run security scan
      run: |
        # Check for common security issues
        bandit -r src/ -f json -o bandit-report.json || true
        
        # Check for known vulnerabilities in dependencies
        safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  docker-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create test credentials for Docker
      run: |
        cat > credentials.json << 'EOF'
        {
          "type": "service_account",
          "project_id": "test-project",
          "private_key_id": "test-key-id",
          "private_key": "-----BEGIN PRIVATE KEY-----\nTEST_KEY\n-----END PRIVATE KEY-----\n",
          "client_email": "test@test-project.iam.gserviceaccount.com",
          "client_id": "123456789",
          "auth_uri": "https://accounts.google.com/o/oauth2/auth",
          "token_uri": "https://oauth2.googleapis.com/token",
          "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
          "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test",
          "universe_domain": "googleapis.com"
        }
        EOF

    - name: Build Docker image
      run: |
        docker build -t firebase-mcp-server:test .

    - name: Test Docker image
      run: |
        # Test that the image builds and starts correctly
        timeout 30 docker run --rm -v $(pwd)/credentials.json:/app/credentials.json firebase-mcp-server:test \
          python main.py --google-credentials /app/credentials.json --help || true